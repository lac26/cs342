Basic SQL (Section 6.3) — Review basic SQL as needed, then write sample queries that:

Use one or more tuple variables (Section 6.3.2).
SELECT P.firstName, P.lastName, C.status
FROM Performer AS P, Casting AS C
WHERE C.performerID = P.id AND P.firstName LIKE 'Harrison';


Use one or more of the set operations, e.g., UNION, EXCEPT, INTERSECT (Section 6.3.4).
All actors with the first name Rachael who are not stars:

(SELECT P.firstName, P.lastName
FROM Performer as P
WHERE P.firstName = 'Rachael')
EXLUDE
(SELECT P.firstName, P.lastName
FROM Performer as P, Casting as C
WHERE C.performerID = P.id AND C.status = 'star'
);


Advanced SQL (Sections 7.1.1–7.1.5) — This will include more new material; write sample queries that:


Select based on a NULL field value (Section 7.1.1).
SELECT id
FROM Performer as P
WHERE P.firstName IS NULL;


Implement a nested sub-query, using [NOT] EXISTS, IN, ANY or ALL (Sections 7.1.2–7.1.4).

retrieve name of each performer who is in movie past year 2000

SELECT P.firstName, P.lastNamt
FROM Performer as P
WHERE P.id IN ( SELECT 	P.id
				FROM Casting as C
				WHERE P.id = C.movieID IN
					( SELECT M.id
					FROM Movie as M
					WHERE M.id = C.id AND M.year > 2000
					 )
					);




Implement a correlated sub-query (Section 7.1.3).


//select all performers with a status of star
SELECT P.id 
FROM Performer as P, Casting as C
WHERE P.id = C.performerID 
	  AND C.status LIKE '%star%'





table to use as a reference:

DROP TABLE Casting;
DROP TABLE Movie;
DROP TABLE Performer;

-- Create database schema
CREATE TABLE Movie (
	id integer,
	title varchar(70) NOT NULL,
	year decimal(4),
	score float,
	votes integer,
	PRIMARY KEY (id),
	CHECK (year > 1900)
	);

CREATE TABLE Performer (
	id integer,
	firstName varchar(20),
	lastName varchar(25),
	PRIMARY KEY (id)
	);

CREATE TABLE Casting (
	movieId integer,
	performerId integer,
	status varchar(6),
	FOREIGN KEY (movieId) REFERENCES Movie(Id) ON DELETE CASCADE,
	FOREIGN KEY (performerId) REFERENCES Performer(Id) ON DELETE SET NULL,
	CHECK (status in ('star', 'costar', 'extra'))
	);

-- Load sample data
INSERT INTO Movie VALUES (1,'Star Wars',1977,8.9, 2000);
INSERT INTO Movie VALUES (2,'Blade Runner',1982,8.6, 1500);

INSERT INTO Performer VALUES (1,'Harrison', 'Ford');
INSERT INTO Performer VALUES (2,'Rutger', 'Hauer');
INSERT INTO Performer VALUES (3,'Chewbacca', NULL);
INSERT INTO Performer VALUES (4,'Rachael', NULL);
INSERT INTO Performer VALUES (5,'Rex', 'Harrison');

INSERT INTO Casting VALUES (1,1,'star');
INSERT INTO Casting VALUES (1,3,'extra');
INSERT INTO Casting VALUES (2,1,'star');
INSERT INTO Casting VALUES (2,2,'costar');
INSERT INTO Casting VALUES (2,4,'costar');