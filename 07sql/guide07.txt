As in the last unit, work through the following materials writing one sample query for each mechanism using the modified version of the movies database (see code/07sql/guide07.sql).

Views (Section 7.3, for Monday)

Write a simple view specification. For details on Oracle views, see Managing Views.

CREATE VIEW PERFORMER_STATUS
AS SELECT id, firstName, lastName, status
FROM PERFORMER, CASTING;

Define the following terms (in the comments of your SQL command file).

Base Tables : tuples that are always physically stored in the DB

Join Views : view that is specified as result of joins, whether than specifying joins each time can use the join view

Updateable Join Views : Join view where INSERT, DELETE, and UPDATE operations are allowed

Key-Preserved Tables: if is key-preserved, a row from the base table will appear at most once in the output view of a table

Views that are implemented via query modification vs materialization. (For details on Oracle materialization, see Materialized View Concepts and Architecture, focusing on the “What is a Materialized View?” and “Why Use Materialized Views” sections.)

Views that are implemented via query modification: transforms the view query into a query on the underlying tables, can be inefficient for views defined via complex queries

Views that are implemented via incremental update: physically creating a temporary or permanent view table when the view is first queried


Formal languages for the relational model (Chapter 8, for Wednesday)

Relational Algebra (read Sections 8.1–8.3 & 8.5) — Write a simple query on the movies database using SELECT (scondition), PROJECT (pfieldlist), RENAME (?newName) and JOIN (?condition) (see example queries 1 & 2 in Section 8.5).

Tuple Relational Calculus (read Sections 8.6.1–8.6.3 & 8.6.8) — Write a simple query on the movies database using the tuple relational calculus queries (see example queries 0 & 1 in Section 8.6.4).

Define the following terms):

Existential and universal quantifiers (see Section 8.6.3).

safe expressions (see Section 8.6.8).

Write your solutions either in ASCII (e.g., SELECT_condition), Unicode (e.g., scondition) or using hand-writing.a



SAMPLE MOVIE DATABASE:

-- Sample version of the Movies database for guide 7 (copied from unit 6)
--
-- CS 342, Spring, 2017
-- kvlinden

-- Drop current database
DROP TABLE Casting;
DROP TABLE Movie;
DROP TABLE Performer;

-- Create database schema
CREATE TABLE Movie (
	id integer,
	title varchar(70) NOT NULL,
	year decimal(4),
	score float,
	votes integer,
	PRIMARY KEY (id),
	CHECK (year > 1900)
	);

CREATE TABLE Performer (
	id integer,
	firstName varchar(20),
	lastName varchar(25),
	PRIMARY KEY (id)
	);

CREATE TABLE Casting (
	movieId integer,
	performerId integer,
	status varchar(6),
	FOREIGN KEY (movieId) REFERENCES Movie(Id) ON DELETE CASCADE,
	FOREIGN KEY (performerId) REFERENCES Performer(Id) ON DELETE SET NULL,
	CHECK (status in ('star', 'costar', 'extra'))
	);

-- Load sample data
INSERT INTO Movie VALUES (1,'Star Wars',1977,8.9, 2000);
INSERT INTO Movie VALUES (2,'Blade Runner',1982,8.6, 1500);

INSERT INTO Performer VALUES (1,'Harrison', 'Ford');
INSERT INTO Performer VALUES (2,'Rutger', 'Hauer');
INSERT INTO Performer VALUES (3,'Chewbacca', NULL);
INSERT INTO Performer VALUES (4,'Rachael', NULL);
INSERT INTO Performer VALUES (5,'Rex', 'Harrison');

INSERT INTO Casting VALUES (1,1,'star');
INSERT INTO Casting VALUES (1,3,'extra');
INSERT INTO Casting VALUES (2,1,'star');
INSERT INTO Casting VALUES (2,2,'costar');
INSERT INTO Casting VALUES (2,4,'costar');